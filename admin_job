#!/bin/bash
# file: admin_job
# rbd offline recovery tool
# author: min chen(minchen@ubuntukylin.com) 2014

my_dir=$(dirname "$0")

. $my_dir/common_h
. $my_dir/metadata_h
. $my_dir/epoch_h
. $my_dir/database_h

#scp files from admin node to osd node
file1=common_h
file2=metadata_h
file3=epoch_h
file4=osd_job

#------------ admin node's action -------------

function scp_file()
{
  local func="scp_file"
  file=$1
  if [ "$1"x = ""x ];then
    echo "$func: not file input"
    exit
  fi
  for host in `cat $osd_host`
  do
  {
    echo "$func: $host"
    scp $ssh_option $file $host:$job_path  1>/dev/null
  } &
  done
}

function scp_files()
{
  local func="scp_files"
  for host in `cat $osd_host`
  do
  {
    echo "$func: $host"
    scp $ssh_option $file1 $host:$job_path
    scp $ssh_option $file2 $host:$job_path
    scp $ssh_option $file3 $host:$job_path
    scp $ssh_option $file4 $host:$job_path
  } &
  done
  wait
  echo "$func: finish"
}

function scatter_node_jobs()
{
  local func="scatter_node_jobs"
  local host=
  local data_path=
  echo "$func ..."
  while read line
  do
  {
    host=`echo $line|awk '{print $1}'`
    data_path=`echo $line|awk '{print $2}'`
    check_osd_process $host

    cmd="mkdir -p $job_path"
    ssh $ssh_option $host $cmd
    scp $ssh_option $file1 $host:$job_path  >/dev/null
    scp $ssh_option $file2 $host:$job_path  >/dev/null
    scp $ssh_option $file3 $host:$job_path  >/dev/null
    scp $ssh_option $file4 $host:$job_path  >/dev/null
      
    cmd1="bash $job_path/osd_job set_env_osd $data_path"
    cmd2="bash $job_path/osd_job do_omap_list"
    cmd3="bash $job_path/osd_job do_pg_epoch"
    cmd4="bash $job_path/osd_job do_image_list"
    cmds="$cmd1; $cmd2; $cmd3; $cmd4"
    ssh $ssh_option $host $cmds </dev/null
  } &
  done < $osd_host_path
  wait
  echo "$func: finish"
}

function gather_node_infos()
{
  local func="gather_node_infos"
  echo "$func ..."
  >$pg_coll
  >$image_coll_v1
  >$image_coll_v2
  for host in `cat $osd_host`
  do
  {
    echo "$func: $host"
    check_osd_process $host

    #pg epoch
    cmd="cat $node_pg_epoch"
    ssh $ssh_option $host $cmd >> $pg_coll
    #image v1
    cmd1="cat $image_v1" 
    ssh $ssh_option $host $cmd1 >> $image_coll_v1
    #image v2
    cmd2="cat $image_v2" 
    ssh $ssh_option $host $cmd2 >> $image_coll_v2
  } &
  done
  wait
  echo "$func: finish"
}

function scatter_gather()
{
  local func="scatter_gather"
  if [ ! -s $osd_host ];then
    echo "$func: no osd_host input"
    exit
  fi
  if [ ! -s $mon_host ];then
    echo "$func: no mon_host input"
    exit
  fi
  scatter_node_jobs
  gather_node_infos
}


#------------- operations --------------

function database()
{
  scatter_gather
  gen_database
}

function list()
{
  list_images
}

function lookup()
{
  lookup_image $1
}

function recover()
{
  recover_image $1 $2
}

#------------- helper -------------
function usage()
{
  local cmd_name="./admin_job"
  echo "$cmd_name database"
  echo "$cmd_name list"
  echo "$cmd_name lookup <image_name>"
  echo "$cmd_name recover <image_name> [</path/to/store/image>]"
}

function get_path()
{
  local func="get_path"
  if [ "$1"x = ""x ];then
    exit
  fi
  if [[ $1 =~ // ]];then
    exit # "/path//to" is invalid
  fi
  local parent=`dirname $1`
  local name=`basename $1`
  echo -n "$parent/$name"
}

function admin_cmd()
{
  local func="admin_cmd"
  if [ $# -lt 1 ];then
    usage
    exit
  fi
  if [ "$1"x = "-h"x ] || [ "$1"x = "--help"x ];then
    usage
    exit
  fi

  for i in $*
  do
    echo -n "$i "
  done
  echo
  
  if [ "$1"x = "database"x ];then
    if [ $# -gt 1 ];then
      usage
      exit
    fi
    database
  elif [ "$1"x = "list"x ];then
    if [ $# -gt 1 ];then
      usage
      exit
    fi
    list
  elif [ "$1"x = "lookup"x ];then
    if [ $# -gt 2 ];then
      usage
      exit
    fi
    lookup $2
  elif [ "$1"x = "recover"x ];then
    if [ $# = 2 ];then
      recover $2
    elif [ $# = 3 ];then
      local path=`get_path $3`
      if [ "$path"x = ""x ];then
  	echo "$func: $3 invalid"
	exit
      fi
      recover $2 $path
    else
      usage
    fi
  elif [ "$1"x = "scp_files"x ];then
    if [ $# -gt 1 ];then
      exit
    fi
    scp_files
  elif [ "$1"x = "scp_file"x ];then
    if [ $# -gt 2 ];then
      exit
    fi
    scp_file $2
  else
    echo "$func: command not found"
  fi
}

init_env_admin
admin_cmd $*

