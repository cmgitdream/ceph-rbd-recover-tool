#!/bin/bash
# file: metadata_h
# author: min chen(minchen@ubuntukylin.com) 2014 2015

my_dir=$(dirname "$0")
. $my_dir/common_h
. $my_dir/epoch_h

# put origin name in $image_name_in: for output
# put convert "_" name in $image_name: for grep image hobjects from database
image_name_in=
image_name=
function input_image()
{
  local func="input_image"
  if [ "$1"x = ""x ];then
    echo "$func: no image name input"
    exit
  fi

  image_name_in=$1
  # "_" -> "\u"
  image_name=`convert_underline $image_name_in`
}

#======================================== distinguish v1 or v2 ===================================  
image_list_v1=/tmp/image_list_v1
image_list_v2=/tmp/image_list_v2
function get_image_list()
{
  find $osd_data/current/ -type f|grep ".rbd__" >$image_list_v1
  find $osd_data/current/ -type f|grep "rbd\\\\uid." >$image_list_v2
}

function get_image_format_by_hobject()
{
  local func="get_image_format"
  if [ "$1"x = ""x ];then
    exit
  fi
  local res1=`cat $image_list_v1|grep $1`  
  if [ "$res1"x != ""x ];then
    echo 1
    exit
  fi  
 
  local res2=`cat $image_list_v2|grep  $1`
  if [ "$res2"x = ""x ];then
    echo 2
    exit
  fi
}

#======================================== image format v1 ========================================  

function get_image_metadata_v1()
{
  local func="get_image_metadata_v1"
  if [ "$1"x = ""x ];then
    echo "$func: no image head object input"
    exit
  fi
  if [ ! -e $1 ];then
    echo "$func: $1 not exists"
    exit
  fi
  local hobject_path=$1  
  d_hobject_path=`dump_backslash $1`
  local image_format=`get_image_format_by_hobject $d_hobject_path`
  if [ $image_format != 1 ];then
    echo "$func: image_format must be 1"
    exit
  fi
 
  if [ ! -e $hobject_path ];then
    echo "$func: $hobject_path not exists"
    exit
  fi

  # decode rbd_obj_header_ondisk
  block_name=`hexdump -e '10/1 "%c"' -s 40 -n 24 $hobject_path`
  order=`hexdump -e '10/4 "%u"' -s 76 -n 1 $hobject_path`
  image_size=`hexdump -C -s 80 -n 8 $hobject_path|head -n 1|awk '{for (i=9; i>1; i--) {printf $i}}'`
  image_size=$((16#$image_size))
  snap_seq=0

  echo -e "block_name:\t$block_name"
  echo -e "order:\t\t$order"
  echo -e "image_size:\t$image_size"
  echo -e "snap_seq:\t$snap_seq"
}

#======================================== end image format v1 ========================================  

#======================================== image format v2 ======================================== 

# map_header, header_seq, header, key/value
# eg. 
# map_header		_HOBJTOSEQ_:rbd%uheader%e139a6b8b4567...head.2.68E826B6
# meta_header_seq	17426
# header:		_USER_0000000000017426_USER_:object_prefix
#			_USER_0000000000017426_USER_:order
#			_USER_0000000000017426_USER_:size
#			_USER_0000000000017426_USER_:snap_seq
# key/value		ceph-kvstore-tool /storepath get _USER_0000000000017426_USER_ (object_prefix|order|size|snap_seq)

# decode image id from image_id_hobject 
function get_image_id()
{
  local func="get_image_id"
  if [ "$1"x = ""x ];then
    exit;
  fi
  local image_id_hobject=$1 #from admin node's database

  if [ ! -e $image_id_hobject ];then
    #echo "$func: $image_id_hobject not exists"
    exit;
  fi
  
  # get len of string  
  local n=`hexdump -e '10/4 "%u"' -s 0 -n 4 $image_id_hobject`
  # get string
  hexdump -e '10/1 "%c"' -s 4 -n $n $image_id_hobject
}

#find image_id omap entry in omaplist
map_header_prefix=
map_header_key=
function get_map_header()
{
  local func="get_map_header"
  local image_id=$1
  if [ "$image_id"x = ""x ];then
    echo "$func: no image_id input"
    exit;
  fi
  map_header_prefix=`get_map_header_prefix`
  local keyword="header%e"$image_id
  map_header_key=`get_map_header_key $keyword`
  if [ "$map_header_key"x = ""x ];then
    echo "$func: map_header_key is NULL(not in omaplist)"
    exit
  fi
}

#get meta header seq from map_header
meta_header_seq=
function get_meta_header_seq() 
{
  local func="get_meta_header_seq"
  if [ "$1"x == ""x ];then
    echo "$func: no prefix input"
    exit;
  elif [ "$2"x == ""x ];then
    echo "$func: no key input"
    exit;
  fi
  local prefix=$1;
  local key=$2;
  meta_header_seq=`get_header_seq $prefix $key`
}

# get image metadata : object_prefix, order, image_size, snap_seq
object_prefix=
order=
image_size=
snap_seq=
function get_image_metadata_v2()
{
  local func="get_image_metadata_v2"
  if [ "$1"x = ""x ];then
    echo "$func: no meta_header_seq input"
    exit;
  fi
  local meta_header_seq=`printf "%016d" $1`
  #echo "$func: meta_header_seq = "$meta_header_seq
  local ghobject_key="_USER_"$meta_header_seq"_USER_"
  local prefix=$ghobject_key

  object_prefix=`get_header_kv $prefix object_prefix string`
  #object_prefix="rbd_data.$image_id"
  order=`get_header_kv $prefix order int`
  image_size=`get_header_kv $prefix size int` 
  snap_seq=`get_header_kv $prefix snap_seq int`

  echo -e "object_prefix:\t$object_prefix"
  echo -e "order:\t\t$order"
  echo -e "image_size:\t$image_size"
  echo -e "snap_seq:\t$snap_seq"
}

#======================================== end image format v2 ========================================  
